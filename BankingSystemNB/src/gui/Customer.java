package gui;

import database.CustomerAccounts;
import database.SQLDriver;
import java.sql.ResultSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
//import net.proteanit.sql.DbUtils;
//import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import accounts.Savings;
import accounts.Checking;
import accounts.*;

public class Customer extends javax.swing.JFrame {

    //Global Variables
    public static people.Customer testCustomer= new people.Customer();
    
    static public String[] checkingAccountList;
    /**
     * Creates new form Customer
     */
    public Customer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Select Customer Account");

        jButton1.setText("OK");
        jButton1.setMaximumSize(new java.awt.Dimension(75, 25));
        jButton1.setMinimumSize(new java.awt.Dimension(75, 25));
        jButton1.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton7.setText("Back");
        jButton7.setToolTipText("Return to Previous Screen");
        jButton7.setMaximumSize(new java.awt.Dimension(75, 25));
        jButton7.setMinimumSize(new java.awt.Dimension(75, 25));
        jButton7.setPreferredSize(new java.awt.Dimension(75, 25));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField1.setToolTipText("Enter Customer ID Number");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter Customer ID Number");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(jTextField1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(328, 328, 328)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 260, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(163, 163, 163)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String customerIDString = jTextField1.getText();
        SQLDriver db = new SQLDriver();
        
        if (customerIDString.equals("")){
            jLabel3.setText("Enter Customer ID");
        }else{
            int customerID = Integer.parseInt(customerIDString);
            people.Customer searchCustomer = new people.Customer();
            searchCustomer.search(customerID);
        
            List<CustomerAccounts> theAccountList = searchCustomer.getCustomerAccounts();
       
            
            
            
            //Set the Customer General Info
            SelectCustomerOption co = new SelectCustomerOption();
            SelectCustomerOption.jLabel3.setText(customerIDString);
            SelectCustomerOption.jLabel6.setText(searchCustomer.getFirstName());
            SelectCustomerOption.jLabel7.setText(searchCustomer.getLastName());
            SelectCustomerOption.jLabel9.setText(searchCustomer.getSSNumber());
            SelectCustomerOption.jLabel11.setText(searchCustomer.getStreetAddress());
            SelectCustomerOption.jLabel12.setText(searchCustomer.getCity());
            SelectCustomerOption.jLabel15.setText(searchCustomer.getState());
            SelectCustomerOption.jLabel17.setText(searchCustomer.getZipCode());
            
            //Set the Customer Account Info
            DefaultTableModel modelSavings = (DefaultTableModel) SelectCustomerOption.jTableSavings.getModel();
            DefaultTableModel modelChecking = (DefaultTableModel) SelectCustomerOption.jTableChecking.getModel();
            DefaultTableModel modelLoans = (DefaultTableModel) SelectCustomerOption.jTableLoans.getModel();
            DefaultTableModel modelCD = (DefaultTableModel) SelectCustomerOption.jTableCD.getModel();
            DefaultTableModel modelCreditCard = (DefaultTableModel) SelectCustomerOption.jTableCreditCard.getModel();
            
            //This code works VERY well, but it involves adding an additional .jar file. I'll try another way.
            /*
            String[] differentAccounts = {"savings", "checking", "loan", "cd", "ccard"};
            String[] differentLabels = {"OwnerID", "CustID", "CustID", "CustID", "CustID", "CustID"};
            JTable[] differentTables = {
                SelectCustomerOption.jTableSavings,
                SelectCustomerOption.jTableChecking,
                SelectCustomerOption.jTableLoans,
                SelectCustomerOption.jTableCD,
                SelectCustomerOption.jTableCreditCard
            };
            for(int i = 0; i<differentAccounts.length; i++){
                SQLDriver db = new SQLDriver();
                String statement = "SELECT * FROM " + differentAccounts[i] + " WHERE " + differentLabels[i] + "="+searchCustomer.getID()+";";
                ResultSet rs = (ResultSet)db.select(statement);
                differentTables[i].setModel(DbUtils.resultSetToTableModel(rs));
            }
            */

            List<String> tempCheckingAcctList = new ArrayList<String>();
            for(int i=0; i<theAccountList.size(); i++){
                String accountType = (theAccountList.get(i)).getAccountType();
                
                int    accountID = (theAccountList.get(i)).getAccountID();
                
                String accountIDString = Integer.toString(accountID);
                
                
                
                switch (accountType){
                    
                    case "Savings":
                        String statementSavings = "SELECT * FROM savings WHERE AccountID = " + accountID + ";";
                        ResultSet resSavings = (ResultSet)db.select(statementSavings);
                        try{
                            while (resSavings.next()){    
                                double interestRate = resSavings.getDouble("Interest");
                                double balance = resSavings.getDouble("Balance");
                                double overdraft = resSavings.getDouble("Overdraft");
                                Date opened = resSavings.getDate("Opened");
                                int active = resSavings.getInt("Active");
                                String activeOut;
                                
                                if (active == 1){
                                    activeOut = "Yes";
                                }else{
                                    activeOut = "No";
                                }
                                                              
                                modelSavings.addRow(new Object[]{accountID, balance, interestRate, 
                                    overdraft, opened, activeOut});
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        
                        break;
                    case "Checking":
                        String statementChecking = "SELECT * FROM checking WHERE AccountID = " + accountID + ";";
                        ResultSet resChecking = (ResultSet)db.select(statementChecking);
                        try{
                            while (resChecking.next()){    
                                double interestRate = resChecking.getDouble("Interest");
                                double balance = resChecking.getDouble("Value");
                                double overdraftAccount = resChecking.getDouble("SavingsAcct");
                                Date opened = resChecking.getDate("Opened");
                                int active = resChecking.getInt("Active");
                                String type = resChecking.getString("Type");
                                double averageBalance = resChecking.getDouble("AvgBal");
                                String activeOut;
                                
                                if (active == 1){
                                    activeOut = "Yes";
                                }else{
                                    activeOut = "No";
                                }
                                                              
                                modelChecking.addRow(new Object[]{accountID, type,  balance, interestRate, 
                                    overdraftAccount, averageBalance, opened, activeOut});
                                
                                tempCheckingAcctList.add(accountIDString);
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }

                        break;
                    case "Loan":
                        String statementLoan = "SELECT * FROM loan WHERE AccountID = " + accountID + ";";
                        ResultSet resLoan = (ResultSet)db.select(statementLoan);
                        try{
                            while (resLoan.next()){    
                                double interestRate = resLoan.getDouble("Interest");
                                String loanType = resLoan.getString("Type");
                                double monthly = resLoan.getDouble("Monthly");
                                double totalAmt = resLoan.getDouble("TotalAmt");
                                double currAmt = resLoan.getDouble("CurrAmt");
                                Date nextPmt = resLoan.getDate("NextDue");
                                Date lastFull = resLoan.getDate("LastFull");
                                int flag = resLoan.getInt("Flag");
                                String flagOut;
                                
                                if (flag == 1){
                                    flagOut = "Yes";
                                }else{
                                    flagOut = "No";
                                }
                                
                                int active = resLoan.getInt("Active");
                                String activeOut;
                                
                                if (active == 1){
                                    activeOut = "Yes";
                                }else{
                                    activeOut = "No";
                                }
                                                              
                                modelLoans.addRow(new Object[]{accountID, loanType, interestRate, 
                                    monthly, nextPmt, currAmt, flagOut, lastFull, activeOut});
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        break;
                    case "CD":
                        String statementCD = "SELECT * FROM cd WHERE AccountID = " + accountID + ";";
                        ResultSet resCD = (ResultSet)db.select(statementCD);
                        try{
                            while (resCD.next()){    
                                double interestRate = resCD.getDouble("Interest");
                                double value = resCD.getDouble("Value");
                                Date opened = resCD.getDate("Opened");
                                Date maturityDate = resCD.getDate("Maturity");
                                Date rolloverDate = resCD.getDate("Rollover");
                                String penalty = resCD.getString("Penalty");
                                                              
                                modelCD.addRow(new Object[]{accountID, value, interestRate, 
                                    opened, maturityDate, rolloverDate, penalty});
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        break;
                    case "Credit Card":
                        String statementCreditCard = "SELECT * FROM ccard WHERE AccountID = " + accountID + ";";
                        ResultSet resCreditCard = (ResultSet)db.select(statementCreditCard);
                        try{
                            while (resCreditCard.next()){    
                                double interestRate = resCreditCard.getDouble("Interest");
                                double totalCredit = resCreditCard.getDouble("TotalCredit");
                                double openCredit = resCreditCard.getDouble("OpenCredit");
                                double usedCredit = resCreditCard.getDouble("UsedCredit");
                                Date nextDue = resCreditCard.getDate("NextDue");
                                String penalty = resCreditCard.getString("Penalty");
                                int active = resCreditCard.getInt("Active");
                                String activeOut;
                                
                                if (active == 1){
                                    activeOut = "Yes";
                                }else{
                                    activeOut = "No";
                                }

                                                              
                                modelCreditCard.addRow(new Object[]{accountID, interestRate, totalCredit,
                                    openCredit, usedCredit, nextDue, penalty, activeOut});
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        break;
                        
                }
 

            }
      
            checkingAccountList = tempCheckingAcctList.toArray(new String[tempCheckingAcctList.size()]);
                
            for (int i=0; i<checkingAccountList.length; i++){
                    
            }
            
            dispose();
            co.setResizable(false);
            co.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        dispose();
        BankingSystemMainScreen bsms = new BankingSystemMainScreen();
        bsms.setResizable(false);
        bsms.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
