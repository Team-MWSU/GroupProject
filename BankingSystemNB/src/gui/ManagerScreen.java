package gui;

import database.CustomerAccounts;
import database.SQLDriver;
import java.sql.ResultSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;

public class ManagerScreen extends javax.swing.JFrame {
    
    static ManagerActionScreen mas = new ManagerActionScreen();
    
    static public String[] checkingAccountList;
    static public String[] creditCardAccountList;
    static public String[] savingsAccountList;
    static public String[] shortTermLoanAccountList;
    static public String[] longTermLoanAccountList;
    
    static public String[] accountTypesList;
    
    
    /**
     * Creates new form ManagerScreen
     */
    public ManagerScreen() {
        initComponents();
    }

    private boolean isNumeric(String input)
    {
        Scanner sc = new Scanner(input);
        return sc.hasNextInt();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButtonSelectCustomer = new javax.swing.JButton();
        jButtonCreateCustomer = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter Customer ID Number");

        jButtonSelectCustomer.setText("Select Customer");
        jButtonSelectCustomer.setToolTipText("Select Customer");
        jButtonSelectCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectCustomerActionPerformed(evt);
            }
        });

        jButtonCreateCustomer.setText("Create Customer");
        jButtonCreateCustomer.setToolTipText("Create Customer");
        jButtonCreateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateCustomerActionPerformed(evt);
            }
        });

        jButton3.setText("Back");
        jButton3.setToolTipText("Return to Previous Screen");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Manager Select Screen");

        jTextField1.setToolTipText("Enter Customer ID Number");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSelectCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(250, 322));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateCustomerActionPerformed
        //dispose();
        CreateCustomer cc = new CreateCustomer();
        cc.setResizable(false);
        cc.setVisible(true);
    }//GEN-LAST:event_jButtonCreateCustomerActionPerformed

    private void jButtonSelectCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectCustomerActionPerformed
        
        String customerIDString = jTextField1.getText();
        int customerID = Integer.parseInt(customerIDString);
        SQLDriver db = new SQLDriver();
        database.Customer newCust = new database.Customer();
        
        if (customerIDString.equals("")){
            jLabel3.setText("Enter ALL Text");
        }
        else if(!isNumeric(customerIDString))
        {
            jLabel3.setText("Invalid Input");
        }
        else if(newCust.search(Integer.parseInt(customerIDString))==null)
        {
            jLabel3.setText("Customer Not Found");
        }

        else{
            
            CustomerInformationTable newTab = new CustomerInformationTable(customerID);
            /*
            int customerID = Integer.parseInt(customerIDString);
            people.Customer searchCustomer = new people.Customer();
            searchCustomer.search(customerID);
            
            dispose();
            
            ManagerActionScreen.jLabelCustomerID.setText(customerIDString);
            ManagerActionScreen.jLabel11.setText(searchCustomer.getFirstName());
            ManagerActionScreen.jLabel12.setText(searchCustomer.getLastName());
            ManagerActionScreen.jLabel13.setText(searchCustomer.getSSNumber());
            ManagerActionScreen.jLabel14.setText(searchCustomer.getStreetAddress());
            ManagerActionScreen.jLabel15.setText(searchCustomer.getCity());
            ManagerActionScreen.jLabel17.setText(searchCustomer.getState());
            ManagerActionScreen.jLabel16.setText(searchCustomer.getZipCode());

            List<CustomerAccounts> theAccountList = searchCustomer.getCustomerAccounts();
            

            
            //Set the Customer Account Info
            DefaultTableModel modelSavings = (DefaultTableModel) ManagerActionScreen.jTableSavings.getModel();
            DefaultTableModel modelChecking = (DefaultTableModel) ManagerActionScreen.jTableChecking.getModel();
            DefaultTableModel modelLoans = (DefaultTableModel) ManagerActionScreen.jTableLoans.getModel();
            DefaultTableModel modelCD = (DefaultTableModel) ManagerActionScreen.jTableCD.getModel();
            DefaultTableModel modelCreditCard = (DefaultTableModel) ManagerActionScreen.jTableCreditCard.getModel();
            
            //This code works VERY well, but it involves adding an additional .jar file. I'll try another way.
            /*
            String[] differentAccounts = {"savings", "checking", "loan", "cd", "ccard"};
            String[] differentLabels = {"OwnerID", "CustID", "CustID", "CustID", "CustID", "CustID"};
            JTable[] differentTables = {
                ManagerActionScreen.jTableSavings,
                ManagerActionScreen.jTableChecking,
                ManagerActionScreen.jTableLoans,
                ManagerActionScreen.jTableCD,
                ManagerActionScreen.jTableCreditCard
            };
            for(int i = 0; i<differentAccounts.length; i++){
                SQLDriver db = new SQLDriver();
                String statement = "SELECT * FROM " + differentAccounts[i] + " WHERE " + differentLabels[i] + "="+searchCustomer.getID()+";";
                ResultSet rs = (ResultSet)db.select(statement);
                differentTables[i].setModel(DbUtils.resultSetToTableModel(rs));
            }
            */
/*
            List<String> tempCheckingAcctList = new ArrayList<String>();
            List<String> tempCreditCardAcctList = new ArrayList<String>();
            List<String> tempSavingsAcctList = new ArrayList<String>();
            List<String> tempShortTermAcctList = new ArrayList<String>();
            List<String> tempLongTermAcctList = new ArrayList<String>();
            
            List<String> tempTypeAccountList = new ArrayList<String>();
            
            for(int i=0; i<theAccountList.size(); i++){
                String accountType = (theAccountList.get(i)).getAccountType();
                
                int    accountID = (theAccountList.get(i)).getAccountID();
                
                String accountIDString = Integer.toString(accountID);
                
                switch (accountType){
                    
                    case "Savings":
                        String statementSavings = "SELECT * FROM savings WHERE AccountID = " + accountID + ";";
                        ResultSet resSavings = (ResultSet)db.select(statementSavings);
                        try{
                            while (resSavings.next()){    
                                double interestRate = resSavings.getDouble("Interest");
                                double balance = resSavings.getDouble("Balance");
                                double overdraft = resSavings.getDouble("Overdraft");
                                Date opened = resSavings.getDate("Opened");
                                int active = resSavings.getInt("Active");
                                String activeOut;
                                
                                if (active == 1){
                                    activeOut = "Yes";
                                }else{
                                    activeOut = "No";
                                }
                                                              
                                modelSavings.addRow(new Object[]{accountID, balance, interestRate, 
                                    overdraft, opened, activeOut});
                                
                                tempSavingsAcctList.add(accountIDString);
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        
                        break;
                    case "Checking":
                        String statementChecking = "SELECT * FROM checking WHERE AccountID = " + accountID + ";";
                        ResultSet resChecking = (ResultSet)db.select(statementChecking);
                        try{
                            while (resChecking.next()){    
                                double interestRate = resChecking.getDouble("Interest");
                                double balance = resChecking.getDouble("Value");
                                double overdraftAccount = resChecking.getDouble("SavingsAcct");
                                Date opened = resChecking.getDate("Opened");
                                int active = resChecking.getInt("Active");
                                String type = resChecking.getString("Type");
                                double averageBalance = resChecking.getDouble("AvgBal");
                                String activeOut;
                                
                                if (active == 1){
                                    activeOut = "Yes";
                                }else{
                                    activeOut = "No";
                                }
                                                              
                                modelChecking.addRow(new Object[]{accountID, type,  balance, interestRate, 
                                    overdraftAccount, averageBalance, opened, activeOut});
                                
                                tempCheckingAcctList.add(accountIDString);
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }

                        break;
                    case "Loan":
                        String statementLoan = "SELECT * FROM loan WHERE AccountID = " + accountID + ";";
                        ResultSet resLoan = (ResultSet)db.select(statementLoan);
                        try{
                            while (resLoan.next()){    
                                double interestRate = resLoan.getDouble("Interest");
                                String loanType = resLoan.getString("Type");
                                double monthly = resLoan.getDouble("Monthly");
                                double totalAmt = resLoan.getDouble("TotalAmt");
                                double currAmt = resLoan.getDouble("CurrAmt");
                                Date nextPmt = resLoan.getDate("NextDue");
                                Date lastFull = resLoan.getDate("LastFull");
                                int flag = resLoan.getInt("Flag");
                                String flagOut;
                                
                                if (flag == 1){
                                    flagOut = "Yes";
                                }else{
                                    flagOut = "No";
                                }
                                
                                int active = resLoan.getInt("Active");
                                String activeOut;
                                
                                if (active == 1){
                                    activeOut = "Yes";
                                }else{
                                    activeOut = "No";
                                }
                                                              
                                modelLoans.addRow(new Object[]{accountID, loanType, interestRate, 
                                    monthly, nextPmt, currAmt, flagOut, lastFull, activeOut});
                                
                                if (loanType.equals("Short")){
                                    tempShortTermAcctList.add(accountIDString);
                                    
                                    if (tempTypeAccountList.contains("Short-Term Loan")){
                                    //Skip adding Type to tempTypeAccountList
                                    }else{
                                        tempTypeAccountList.add("Short-Term Loan");
                                    }
                                }else{
                                    tempLongTermAcctList.add(accountIDString);
                                    
                                    if (tempTypeAccountList.contains("Long-Term Loan")){
                                    //Skip adding Type to tempTypeAccountList
                                    }else{
                                        tempTypeAccountList.add("Long-Term Loan");
                                    }
                                }
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }                       
                        break;
                    case "CD":
                        String statementCD = "SELECT * FROM cd WHERE AccountID = " + accountID + ";";
                        ResultSet resCD = (ResultSet)db.select(statementCD);
                        try{
                            while (resCD.next()){    
                                double interestRate = resCD.getDouble("Interest");
                                double value = resCD.getDouble("Value");
                                Date opened = resCD.getDate("Opened");
                                Date maturityDate = resCD.getDate("Maturity");
                                Date rolloverDate = resCD.getDate("Rollover");
                                String penalty = resCD.getString("Penalty");
                                                              
                                modelCD.addRow(new Object[]{accountID, value, interestRate, 
                                    opened, maturityDate, rolloverDate, penalty});
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        break;
                    case "Credit Card":
                        String statementCreditCard = "SELECT * FROM ccard WHERE AccountID = " + accountID + ";";
                        ResultSet resCreditCard = (ResultSet)db.select(statementCreditCard);
                        try{
                            while (resCreditCard.next()){    
                                double interestRate = resCreditCard.getDouble("Interest");
                                double totalCredit = resCreditCard.getDouble("TotalCredit");
                                double openCredit = resCreditCard.getDouble("OpenCredit");
                                double usedCredit = resCreditCard.getDouble("UsedCredit");
                                Date nextDue = resCreditCard.getDate("NextDue");
                                String penalty = resCreditCard.getString("Penalty");
                                int active = resCreditCard.getInt("Active");
                                String activeOut;
                                
                                if (active == 1){
                                    activeOut = "Yes";
                                }else{
                                    activeOut = "No";
                                }

                                tempCreditCardAcctList.add(accountIDString);
                                                              
                                modelCreditCard.addRow(new Object[]{accountID, interestRate, totalCredit,
                                    openCredit, usedCredit, nextDue, penalty, activeOut});
                            }
                        }catch (Exception ex){
                            ex.printStackTrace();
                        }
                        
                        if (tempTypeAccountList.contains("Credit Card")){
                            //Skip adding Type to tempTypeAccountList
                        }else{
                            tempTypeAccountList.add("Credit Card");
                        }
                        break;
                        
                }
 

            }
      
            checkingAccountList = tempCheckingAcctList.toArray(new String[tempCheckingAcctList.size()]);
            savingsAccountList = tempSavingsAcctList.toArray(new String[tempSavingsAcctList.size()]);
            creditCardAccountList = tempCreditCardAcctList.toArray(new String[tempCreditCardAcctList.size()]);  
            shortTermLoanAccountList = tempShortTermAcctList.toArray(new String[tempShortTermAcctList.size()]);
            longTermLoanAccountList = tempLongTermAcctList.toArray(new String[tempLongTermAcctList.size()]);

            accountTypesList = tempTypeAccountList.toArray(new String[tempTypeAccountList.size()]);
            
            
            
            
            
            
            
            */
            
            
            
            mas.setResizable(false);
            mas.setVisible(true);
        }
    }//GEN-LAST:event_jButtonSelectCustomerActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
        BankingSystemMainScreen bsms = new BankingSystemMainScreen();
        bsms.setResizable(false);
        bsms.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerScreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonCreateCustomer;
    private javax.swing.JButton jButtonSelectCustomer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
